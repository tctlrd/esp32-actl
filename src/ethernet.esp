#include <ETH.h>

uint8_t mac[6] = {0xbc, 0x34, 0x00, 0x00, 0x00, 0x01};
//// eth event callback

void setEnableEth()
{
	doEnableEth = true;
}

void onEthConnect(WiFiEvent_t event, WiFiEventInfo_t inf0)
{
#ifdef DEBUG
	Serial.println(F("[ INFO ] Ethernet Connected"));
#endif
	mqttReconnectTimer.detach();
}

void onEthDisconnect(WiFiEvent_t event, WiFiEventInfo_t inf0)
{
	if ( !ETH.linkUp() )
	{
		return;
	}
#ifdef DEBUG
	Serial.println(F("[ INFO ] ETH Disconnected"));
#endif
	eth_connected = false;
	config.ethlink = "not connected";
	mqttReconnectTimer.detach();
	disconnectMqtt();
}

void onEthGotIP(WiFiEvent_t event, WiFiEventInfo_t info)
{
	delay(100);
	config.ipAddressEth = ETH.localIP();
	config.gatewayIpEth = ETH.gatewayIP();
	config.subnetIpEth = ETH.subnetMask();
	config.dnsIpEth = ETH.dnsIP();
	config.ethmac = ETH.macAddress();
	String linkduplex = "HD";
	if (ETH.fullDuplex() == true) 
	{
		linkduplex = "FD";
	}
	char spd[12]; 
	sprintf(spd, "%dMbps %s", ETH.linkSpeed(), linkduplex);
	config.ethlink = (String)spd;
	eth_connected = true;
#ifdef DEBUG
	Serial.print("[ INFO ] Ethernet IP: ");
	Serial.println(ETH.localIP().toString());
	Serial.print("[ INFO ] Ethernet MAC: ");
	Serial.println(config.ethmac);
	Serial.print("[ INFO ] Ethernet Link: ");
	Serial.println((String)spd);
#endif
	connectToMqtt();
}

void setupEth(bool configured)
{
#ifdef DEBUG
	Serial.println("[ INFO ] Ethernet Setup ");
#endif
	delay(1000);
	ETH.begin(ETH_PHY_ADDR, ETH_PHY_POWER, ETH_PHY_MDC, ETH_PHY_MDIO, ETH_PHY_TYPE, ETH_CLK_MODE);
	if (!configured)
	{
		ETH.setHostname("ESP32-ACTL");
	} else
	{
		ETH.setHostname(config.deviceHostname);
		
		if (!config.dhcpEnabledEth) 
		{
			ETH.config(config.ipAddressEth, config.gatewayIpEth, config.subnetIpEth, config.dnsIpEth);
		}
	}
	WiFi.onEvent(onEthConnect, WiFiEvent_t::ARDUINO_EVENT_ETH_CONNECTED);
	WiFi.onEvent(onEthDisconnect, WiFiEvent_t::ARDUINO_EVENT_ETH_DISCONNECTED);
	WiFi.onEvent(onEthGotIP, WiFiEvent_t::ARDUINO_EVENT_ETH_GOT_IP);
}